estaciones
estaciones[1]$ID
estaciones$ID[1]
paste(estaciones$ID[1],tmax)
paste(estaciones$ID[1],tmax,sep="")
read.csv(paste(estaciones$ID[1],tmax,sep=""))
#nombres
tmax <- "_19802018_TMAX.csv"
tmin <- "19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
read.csv(paste(estaciones$ID[1],tmax,sep=""))
read.csv(paste(estaciones$ID[1],tmin,sep=""))
tmax <- "_19802018_TMAX.csv"
tmin <- "_19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
read.csv(paste(estaciones$ID[1],tmax,sep=""))
read.csv(paste(estaciones$ID[1],tmin,sep=""))
read.csv(paste(estaciones$ID[1],pp,sep=""))
tmax.sta <- read.csv(paste(estaciones$ID[1],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[1],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[1],pp,sep=""))
tmax.sta$ID>1981
as.date(tmax.sta$ID)>1981
as.Date(tmax.sta$ID)>1981
tmax.sta$ID
as.Date(tmax.sta$ID)
tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31)]
tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31")]
tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
pp.sta
?date
?data.frame
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[1],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[1],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[1],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
#generate a df
data <- data.frame(
pp=pp.sta$prcp,
tmin=tmin.sta$a,
tmax=tmax.sta$a,
date = as.Date(pp.sta$T),
stringsAsFactors=FALSE
)
pp.sta
tail(pp.sta)
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta) < as.Date("2015-01-01"),]
#generate a df
data <- data.frame(
pp=pp.sta$prcp,
tmin=tmin.sta$a,
tmax=tmax.sta$a,
date = as.Date(pp.sta$T),
stringsAsFactors=FALSE
)
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
#generate a df
data <- data.frame(
pp=pp.sta$prcp,
tmin=tmin.sta$a,
tmax=tmax.sta$a,
date = as.Date(pp.sta$T),
stringsAsFactors=FALSE
)
data
data <- data.frame(
year = year(as.Date(pp.sta$T)),
month = month(as.Date(pp.sta$T)),
day = day(as.Date(pp.sta$T))
pp=pp.sta$prcp,
tmin=tmin.sta$a,
tmax=tmax.sta$a,
stringsAsFactors=FALSE
)
year(as.Date(pp.sta$T))
pp.sta$T
format(as.Date(pp.sta$T),"%Y")
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
pp=pp.sta$prcp,
tmin=tmin.sta$a,
tmax=tmax.sta$a,
stringsAsFactors=FALSE
)
data
tmax.sta[tmax.sta$a == NA,]
tmax.sta$a
is.na(tmax.sta$a)
tmax.sta[is.na(tmax.sta$a),] <- -999
tmax.sta
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[1],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[1],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[1],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
tmax.sta
tmax.sta$a[is.na(tmax.sta$a),] <- -999
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmax.sta
#-999 to NA
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmin.sta$a[is.na(tmin.sta$a)] <- -999
pp.sta$prcp[is.na(pp.sta$prcp)] <- -999
#generate a df
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=pp.sta$prcp,
tmax=tmax.sta$a,
tmin=tmin.sta$a,
stringsAsFactors=FALSE
)
data
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=pp.sta$prcp,
tmax=tmax.sta$a,
tmin=tmin.sta$a,
stringsAsFactors=FALSE
)
write.csv(data, paste(getwd(),"/Simgen/",estaciones$ID[1],"_19812014.csv", sep=""), row.names = FALSE)
round(pp.sta$prcp,2)
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=round(pp.sta$prcp,2),
tmax=round(tmax.sta$a,2),
tmin=round(tmin.sta$a,2),
stringsAsFactors=FALSE
)
write.csv(data, paste(getwd(),"/Simgen/",estaciones$ID[1],"_19812014.csv", sep=""), row.names = FALSE)
length(estaciones)
metadadata <- "C:/Users/pablo/Desktop/Koen/Cuencas/Metadata/Groot Berg_res_1.txt"
estaciones <- read.csv(metadadata,sep=";")
#nombres
tmax <- "_19802018_TMAX.csv"
tmin <- "_19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
for (k in 1:length(estaciones)) {
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[k],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[k],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[k],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
#-999 to NA
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmin.sta$a[is.na(tmin.sta$a)] <- -999
pp.sta$prcp[is.na(pp.sta$prcp)] <- -999
#generate a df
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=round(pp.sta$prcp,2),
tmax=round(tmax.sta$a,2),
tmin=round(tmin.sta$a,2),
stringsAsFactors=FALSE
)
write.csv(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE)
}
install.packages("rstudioapi")
current_path <- rstudioapi::getActiveDocumentContext()$path
current_path
setwd(dirname(current_path ))
print(getwd())
source("Procesamiento/libreria_preproceso.R")
cargar_librerias()
cargar_librerias()
remover_archivos_antiguos(directorio = c("output_sim","obs","acru","Procesamiento_output","daily","input_sim"))
formateo_datos_pais()
source("Procesamiento/libreria_preproceso.R")
################
###Formateo de los datos
################
setwd("C:/Users/pablo/Desktop/Koen/Cuencas/Groot Berg_res_1")
metadadata <- "C:/Users/pablo/Desktop/Koen/Cuencas/Metadata/Groot Berg_res_1.txt"
estaciones <- read.csv(metadadata,sep=";")
#nombres
tmax <- "_19802018_TMAX.csv"
tmin <- "_19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
for (k in 1:length(estaciones)) {
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[k],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[k],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[k],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
#-999 to NA
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmin.sta$a[is.na(tmin.sta$a)] <- -999
pp.sta$prcp[is.na(pp.sta$prcp)] <- -999
#generate a df
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=round(pp.sta$prcp,2),
tmax=round(tmax.sta$a,2),
tmin=round(tmin.sta$a,2),
stringsAsFactors=FALSE
)
write.csv(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE, sep=";")
}
?write.csv
write.csv2(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE, sep=";")
################
###Formateo de los datos
################
setwd("C:/Users/pablo/Desktop/Koen/Cuencas/Groot Berg_res_1")
metadadata <- "C:/Users/pablo/Desktop/Koen/Cuencas/Metadata/Groot Berg_res_1.txt"
estaciones <- read.csv(metadadata,sep=";")
#nombres
tmax <- "_19802018_TMAX.csv"
tmin <- "_19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
for (k in 1:length(estaciones)) {
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[k],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[k],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[k],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
#-999 to NA
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmin.sta$a[is.na(tmin.sta$a)] <- -999
pp.sta$prcp[is.na(pp.sta$prcp)] <- -999
#generate a df
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=round(pp.sta$prcp,2),
tmax=round(tmax.sta$a,2),
tmin=round(tmin.sta$a,2),
stringsAsFactors=FALSE
)
write.csv(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE)
}
write.table(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE)
################
###Formateo de los datos
################
setwd("C:/Users/pablo/Desktop/Koen/Cuencas/Groot Berg_res_1")
metadadata <- "C:/Users/pablo/Desktop/Koen/Cuencas/Metadata/Groot Berg_res_1.txt"
estaciones <- read.csv(metadadata,sep=";")
#nombres
tmax <- "_19802018_TMAX.csv"
tmin <- "_19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
for (k in 1:length(estaciones)) {
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[k],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[k],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[k],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
#-999 to NA
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmin.sta$a[is.na(tmin.sta$a)] <- -999
pp.sta$prcp[is.na(pp.sta$prcp)] <- -999
#generate a df
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=round(pp.sta$prcp,2),
tmax=round(tmax.sta$a,2),
tmin=round(tmin.sta$a,2),
stringsAsFactors=FALSE
)
write.table(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE)
}
write.table(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE, sep=";")
################
###Formateo de los datos
################
setwd("C:/Users/pablo/Desktop/Koen/Cuencas/Groot Berg_res_1")
metadadata <- "C:/Users/pablo/Desktop/Koen/Cuencas/Metadata/Groot Berg_res_1.txt"
estaciones <- read.csv(metadadata,sep=";")
#nombres
tmax <- "_19802018_TMAX.csv"
tmin <- "_19802018_TMIN.csv"
pp <- "_19812015_CHIRPSonly.csv"
for (k in 1:length(estaciones)) {
#read the data
tmax.sta <- read.csv(paste(estaciones$ID[k],tmax,sep=""))
tmin.sta <- read.csv(paste(estaciones$ID[k],tmin,sep=""))
pp.sta <- read.csv(paste(estaciones$ID[k],pp,sep=""))
#same timeseries
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)>as.Date("1980-12-31"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)>as.Date("1980-12-31"),]
tmax.sta <- tmax.sta[as.Date(tmax.sta$ID)<as.Date("2015-01-01"),]
tmin.sta <- tmin.sta[as.Date(tmin.sta$ID)<as.Date("2015-01-01"),]
pp.sta <- pp.sta[as.Date(pp.sta$T) < as.Date("2015-01-01"),]
#-999 to NA
tmax.sta$a[is.na(tmax.sta$a)] <- -999
tmin.sta$a[is.na(tmin.sta$a)] <- -999
pp.sta$prcp[is.na(pp.sta$prcp)] <- -999
#generate a df
data <- data.frame(
year = format(as.Date(pp.sta$T),"%Y"),
month = format(as.Date(pp.sta$T),"%m"),
day = format(as.Date(pp.sta$T),"%d"),
precip=round(pp.sta$prcp,2),
tmax=round(tmax.sta$a,2),
tmin=round(tmin.sta$a,2),
stringsAsFactors=FALSE
)
write.table(data, paste(getwd(),"/Simgen/",estaciones$ID[k],"_19812014.csv", sep=""), row.names = FALSE, sep=";")
}
#UTF-8
#Encoding(current_path) <- "UTF-8"
#directorio de simgen y script
#opcion b
#setwd("D:/Dropbox-Temporal/cazalac/simgen-Limari_v3")
#Alternativa después de primera ejecución, requiere libreria rstudioapi
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
print(getwd())
#funciones
source("Procesamiento/libreria_preproceso.R")
#librerias
cargar_librerias()
#elimina TODO lo relacionado a otras generaciones, menos los input files ( Input_Datos ), generalmente no es necesario modificar
remover_archivos_antiguos(directorio = c("output_sim","obs","acru","Procesamiento_output","daily","input_sim"))
#relleno y formateo de datos, los datos deben estar en la carpeta  "Input_Datos"
formateo_datos_pais()
warnings()
corrcmip5models(LongMin = 19, LongMax = 16.5, LatMin = -32.77, LatMax = -31.38, umbral = 0.2, clearcache = "YES")
preparacion_datos(codigo.estacion.inicial = 2000 )
library(rstudioapi)
current_path <- rstudioapi::getActiveDocumentContext()$path
#UTF-8
#Encoding(current_path) <- "UTF-8"
#directorio de simgen y script
#opcion b
#setwd("D:/Dropbox-Temporal/cazalac/simgen-Limari_v3")
setwd(dirname(current_path ))
print(getwd())
workingdir <- getwd()
#python dir, con / al final
pythondir <- 'C:/Users/pablo/Anaconda2/'
#add path to python
#############
#cargamos las funciones simix y simgen, no tocar
source("libreriasR/fun_simgen.R")
######################################
#Simgen desde R
#Este archivo ejecuta simgen desde R
#Última Modificación: 05-08-2017 02:00
######################################
#configuración
#workingdir = Corresponde a la carpeta donde se encuentra simgen, cambiar
#directorio de simgen y script
#workingdir <- 'C:/Users/simgen/Desktop/simgen'
#setwd(workingdir)
#seteo automático de directorio de trabajo
library(rstudioapi)
current_path <- rstudioapi::getActiveDocumentContext()$path
#UTF-8
#Encoding(current_path) <- "UTF-8"
#directorio de simgen y script
#opcion b
#setwd("D:/Dropbox-Temporal/cazalac/simgen-Limari_v3")
setwd(dirname(current_path ))
print(getwd())
workingdir <- getwd()
#python dir, con / al final
pythondir <- 'C:/Users/pablo/Anaconda2/'
#add path to python
#############
#cargamos las funciones simix y simgen, no tocar
source("libreriasR/fun_simgen.R")
#Si se desea trabajar un solo percentil, sacar del ciclo usar rango en quantiles
#si no se desean un número muy superior de simixlen, se recomienda limitar simixlen
percentile <- c(10,50,95)
#corresponde a las estaciones procesadas
estaciones <- '2000,2001,2002'
for (percentil.value in percentile) {
#la función quantsearch se encarga de llamar al script de python quantsearch.py
#periodo: Corresponde a la matriz de años
#percentil: Corresponde al percentil
simix <- quantsearch(workingdir,periodo=10,percentil=percentil.value, pydir=pythondir)
#la función simgen se encarga de llamar al script simgen9s_cmip5.py
#simixlen: Es el máximo de simix a utilizar por percentil, si simix < simixlen entonces se usa simix.
#quantiles corresponde a los quantiles a generar
simgen(workingdir, simixlen=100, quantiles = c(percentil.value/100),
obsix = estaciones, simix, write=1, fname='sim_100kyr.dat', simlen=80, locate=2014,
xval=0, M=1, trendmean=-0.06996166, trendsd=0.03411702,
temptrendmean=0.04653016, temptrendsd=0.01432987, pydir=pythondir)
}
GraficarAnual(numestacion = 1, percentiles = c(10,50,95))
GraficarAnual(numestacion = 3, percentiles = c(10,50,95))
numestacion = 1, percentiles = c(10,50,95)
tmax <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="tmax", full.names=TRUE, recursive = TRUE)
tmin <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="tmin", full.names=TRUE, recursive = TRUE)
pp <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="pp", full.names=TRUE, recursive = TRUE)
numestacion = 1
tmax <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="tmax", full.names=TRUE, recursive = TRUE)
tmin <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="tmin", full.names=TRUE, recursive = TRUE)
pp <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="pp", full.names=TRUE, recursive = TRUE)
tmax
tmin
pp
pp_est <- read.csv(pp[1], head=TRUE)
pp_est
pp_est[,numestacion]
######################################
#Simgen desde R
#Este archivo ejecuta simgen desde R
#Última Modificación: 05-08-2017 02:00
######################################
#configuración
#workingdir = Corresponde a la carpeta donde se encuentra simgen, cambiar
#directorio de simgen y script
#workingdir <- 'C:/Users/simgen/Desktop/simgen'
#setwd(workingdir)
#seteo automático de directorio de trabajo
library(rstudioapi)
current_path <- rstudioapi::getActiveDocumentContext()$path
#UTF-8
#Encoding(current_path) <- "UTF-8"
#directorio de simgen y script
#opcion b
#setwd("D:/Dropbox-Temporal/cazalac/simgen-Limari_v3")
setwd(dirname(current_path ))
print(getwd())
workingdir <- getwd()
#python dir, con / al final
pythondir <- 'C:/Users/pablo/Anaconda2/'
#cargamos las funciones simix y simgen, no tocar
source("libreriasR/fun_simgen.R")
GraficarAnual(numestacion = 2000, percentiles = c(10,50,95))
pp
numestacion
pp_est[,numestacion]
GraficarAnual(numestacion = 2000, percentiles = c(10,50,95))
numestacion = 2000, percentiles = c(10,50,95)
numestacion = 2000
percentiles = c(10,50,95)
numestacion <- numestacion - 1998
numestacion
percentil.value
tmax <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="tmax", full.names=TRUE, recursive = TRUE)
tmin <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="tmin", full.names=TRUE, recursive = TRUE)
pp <- dir(path=paste("output_sim/anual/",percentil.value,"",sep=""), pattern="pp", full.names=TRUE, recursive = TRUE)
#generamos 3,1
pp_est <- read.csv(pp[1], head=TRUE)
pdf(paste("output_sim/graficos/P",percentil.value,"_",gsub('X','', colnames(pp_est)[numestacion]),".pdf",sep=""),  width=8, height=9)
par(mfrow=c(3,1))
plot(pp_est[,numestacion], x=as.Date(pp_est[,1]) , type="l", ylab = "Precipitation [mm]", xlab = "Year")
#title(paste("Proyección Precipitación Para Estación",gsub('X','', colnames(pp_est)[numestacion]),"P",percentil.value))
#cargamos las funciones simix y simgen, no tocar
source("libreriasR/fun_simgen.R")
#Si se desea trabajar un solo percentil, sacar del ciclo usar rango en quantiles
#si no se desean un número muy superior de simixlen, se recomienda limitar simixlen
percentile <- c(10,50,95)
#corresponde a las estaciones procesadas
estaciones <- '2000,2001,2002'
GraficarAnual(numestacion = 2000, percentiles = c(10,50,95))
GraficarAnual(numestacion = 2000, percentiles = c(10,50,95))
source("libreriasR/fun_simgen.R")
GraficarAnual(numestacion = 2000, percentiles = c(10,50,95))
source("libreriasR/fun_simgen.R")
GraficarAnual(numestacion = 2000, percentiles = c(10,50,95))
source("libreriasR/fun_simgen.R")
#Si se des
# 1 = not necessarily the first is station 2000
GraficarAnual(numestacion = 1, percentiles = c(10,50,95))
GraficarAnual(numestacion = 2, percentiles = c(10,50,95))
GraficarAnual(numestacion = 3, percentiles = c(10,50,95))
source("libreriasR/fun_simgen.R")
GraficarAnual(numestacion = 1, percentiles = c(10,50,95))
GraficarAnual(numestacion = 2, percentiles = c(10,50,95))
GraficarAnual(numestacion = 3, percentiles = c(10,50,95))
